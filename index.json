{
  "api/Args.CliArgs.CliHandler.html": {
    "href": "api/Args.CliArgs.CliHandler.html",
    "title": "Class CliArgs.CliHandler | Lab3",
    "summary": "Class CliArgs.CliHandler Namespace Args Assembly lab3.dll Handles parsing of CLI arguments and provides the configured execution context, including the selected theme, input source, and verbosity setting. [CompilationMapping(SourceConstructFlags.ObjectType)] public class CliArgs.CliHandler Inheritance object CliArgs.CliHandler Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods Enumerable.Let<TSource, TResult>(TSource, Func<TSource, TResult>) Constructors CliHandler(string[]) public CliHandler(string[] args) Parameters args string[] Properties GlobalTheme Gets the global theme specified via CLI arguments. Defaults to Theme.Cold if not specified. public Coloring.Theme GlobalTheme { get; } Property Value Coloring.Theme InputFile Gets the input source for commands. If an input file is specified, it is used; otherwise, Console input is used. public TextReader InputFile { get; } Property Value TextReader TalkToUser Indicates whether output should be printed to the user (true by default). Can be controlled via the --talkToUser or -q option. public bool TalkToUser { get; } Property Value bool Methods getContext() Constructs and returns a Context instance based on parsed CLI arguments. public Context getContext() Returns Context Configured Context object for executing tasks."
  },
  "api/Args.CliArgs.html": {
    "href": "api/Args.CliArgs.html",
    "title": "Class CliArgs | Lab3",
    "summary": "Class CliArgs Namespace Args Assembly lab3.dll Provides parsing and handling of command-line arguments for the lab3 application. Supports reading an input file, enabling/disabling console output, and setting a visual theme. [CompilationMapping(SourceConstructFlags.Module)] public static class CliArgs Inheritance object CliArgs Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields usage [Literal] public const string usage = \"\\r\\nUsage:\\r\\n lab3 [input-file] [options]\\r\\n\\r\\nOptions:\\r\\n --help|-h Show help message\\r\\n --input-file FILEPATH Specify a task command sequence file\\r\\n --task-to-user BOOL Print messages to the console\\r\\n --theme THEME Set color theme, available themes:\\r\\n - Default\\r\\n - Classic\\r\\n - BlueAccents\\r\\n - Hackerman\\r\\n - Cold\\r\\n - Warm\\r\\n - Sunset\\r\\n - Forest\\r\\n - Ocean\\r\\n -q Set talkToUser to false\\r\\n -td Set theme to Default\\r\\n -tcl Set theme to Classic\\r\\n -tb Set theme to BlueAccents\\r\\n -th Set theme to Hackerman\\r\\n -tc Set theme to Cold\\r\\n -tw Set theme to Warm\\r\\n -ts Set theme to Sunset\\r\\n -tf Set theme to Forest\\r\\n -fo Set theme to Ocean\\r\\n\" Field Value string"
  },
  "api/Args.html": {
    "href": "api/Args.html",
    "title": "Namespace Args | Lab3",
    "summary": "Namespace Args Classes CliArgs Provides parsing and handling of command-line arguments for the lab3 application. Supports reading an input file, enabling/disabling console output, and setting a visual theme. CliArgs.CliHandler Handles parsing of CLI arguments and provides the configured execution context, including the selected theme, input source, and verbosity setting."
  },
  "api/ClassLibraryCS.Collections.DynArray-1.html": {
    "href": "api/ClassLibraryCS.Collections.DynArray-1.html",
    "title": "Class DynArray<T> | Lab3",
    "summary": "Class DynArray<T> Namespace ClassLibraryCS.Collections Assembly ClassLibraryCS.dll A dynamic array that automatically resizes itself as elements are added or removed. public class DynArray<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, ICloneable Type Parameters T Inheritance object DynArray<T> Implements IList<T> ICollection<T> IEnumerable<T> IEnumerable ICloneable Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods Enumerable.Let<TSource, TResult>(TSource, Func<TSource, TResult>) Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Enumerable.Enumerate<TSource>(IEnumerable<TSource>) Enumerable.Filter<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Enumerable.Filter<TSource>(IEnumerable<TSource>, Func<TSource, int, bool>) Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>) Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, bool>, TSource) Enumerable.Fold<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>) Enumerable.Fold<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>) Enumerable.Map<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Enumerable.Max<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Enumerable.Min<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Enumerable.OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>?) Enumerable.OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>?) Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Enumerable.Skip<TSource>(IEnumerable<TSource>, int) Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Enumerable.Take<TSource>(IEnumerable<TSource>, int) Enumerable.ToArray<TSource>(IEnumerable<TSource>) Enumerable.ToDynArray<TSource>(IEnumerable<TSource>) Enumerable.ToList<TSource>(IEnumerable<TSource>) Enumerable.ToSet<TSource>(IEnumerable<TSource>) Constructors DynArray() Initializes a new empty dynamic array. public DynArray() DynArray(int) Initializes a dynamic array with a specified capacity. public DynArray(int capacity) Parameters capacity int The capacity of the array. DynArray(int, Func<T>) Initializes a dynamic array with the specified length and fills it using provided getItem function. public DynArray(int length, Func<T> getItem) Parameters length int The length of the array. getItem Func<T> A function that generates the value for each element. DynArray(int, T?) Initializes a dynamic array with the specified length and fills it with zero. public DynArray(int length, T? zero = default) Parameters length int The length of the array. zero T The default value for each element in the array. Defaults to null for reference types. Properties Capacity Gets or sets the capacity of the array. The capacity is the number of elements the array can hold before resizing is required. public int Capacity { get; set; } Property Value int Count Gets the number of elements currently in the collection. public int Count { get; } Property Value int IsReadOnly Gets a value indicating whether the collection is read-only. public bool IsReadOnly { get; } Property Value bool this[int] Indexer for accessing elements in the collection. public T this[int index] { get; set; } Parameters index int The index of the element in the collection. Property Value T The element at the specified index. Exceptions IndexOutOfRangeException Thrown if the index is out of bounds of the current count of elements in the collection. Methods Add(T) Adds a new element to the end of the array. public void Add(T item) Parameters item T The element to add. Clear() Clears all elements in the array, resetting the count to zero. public void Clear() Clone() Creates a copy of the array. public DynArray<T> Clone() Returns DynArray<T> A new DynArray with the same elements as the current array. Contains(T) Determines whether the array contains the specified element. public bool Contains(T target) Parameters target T The element to check for. Returns bool True if the element is found, otherwise false. CopyTo(T[], int) Copies the elements of the array to the specified destination array, starting at the specified index in the destination array. public void CopyTo(T[] array, int arrayIndex) Parameters array T[] The destination array. arrayIndex int The index in the destination array to start copying. Exceptions ArgumentNullException Thrown if the destination array is null. RankException Thrown if the destination array is not a one-dimensional array. Equals(object?) Determines whether the current array is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare with. Returns bool True if the arrays are equal, otherwise false. GetEnumerator() Returns an enumerator that iterates through the array. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator for the array. GetHashCode() Returns a hash code for the current array. public override int GetHashCode() Returns int A hash code for the array. IndexOf(T) Finds the first occurrence of the specified element in the array. public int IndexOf(T target) Parameters target T The element to find. Returns int The index of the element, or -1 if not found. Insert(int, T) Inserts an element at the specified index in the array. public void Insert(int index, T item) Parameters index int The index at which to insert the element. item T The element to insert. Exceptions ArgumentOutOfRangeException Thrown if the index is outside the bounds of the array. LastIndexOf(T) Finds the last occurrence of the specified element in the array. public int LastIndexOf(T target) Parameters target T The element to find. Returns int The index of the last occurrence of the element, or -1 if not found. Remove(T) Removes the first occurrence of the specified element from the array. public bool Remove(T target) Parameters target T The element to remove. Returns bool True if the element was removed, otherwise false. RemoveAt(int) Removes the element at the specified index in the array. public void RemoveAt(int index) Parameters index int The index of the element to remove. Exceptions ArgumentOutOfRangeException Thrown if the index is outside the bounds of the array. Reserve(int) Reserves space for a minimum specified capacity in the array. public void Reserve(int capacity) Parameters capacity int The minimum capacity to reserve. Resize(int) Resizes the array to a specified size. If the size is smaller than the current size, elements will be removed. public void Resize(int value) Parameters value int The new size of the array. Exceptions ArgumentOutOfRangeException Thrown if the value is negative. Slice(int, int) Creates a slice (sub-array) from the current array starting at a specific index with a given length. public DynArray<T> Slice(int start, int length) Parameters start int The starting index of the slice. length int The length of the slice. Returns DynArray<T> A new DynArray containing the sliced portion of the array. Exceptions ArgumentOutOfRangeException Thrown if the start or length is negative, or if the slice exceeds the current array bounds. ToString() Returns a string representation of the array, with each element separated by a comma. If the elements of T implement ICollection<T>, each item will be printed on a new line. public override string ToString() Returns string A string representation of the array. Operators operator +(DynArray<T>, DynArray<T>) Concatenates two arrays and returns a new array containing all the elements of both arrays. public static DynArray<T> operator +(DynArray<T> a, DynArray<T> b) Parameters a DynArray<T> The first array. b DynArray<T> The second array. Returns DynArray<T> A new DynArray containing the elements of both arrays. operator ==(DynArray<T>?, DynArray<T>?) Determines whether two arrays are equal. public static bool operator ==(DynArray<T>? a, DynArray<T>? b) Parameters a DynArray<T> The first array. b DynArray<T> The second array. Returns bool True if the arrays are equal, otherwise false. operator !=(DynArray<T>?, DynArray<T>?) Determines whether two arrays are not equal. public static bool operator !=(DynArray<T>? a, DynArray<T>? b) Parameters a DynArray<T> The first array. b DynArray<T> The second array. Returns bool True if the arrays are not equal, otherwise false."
  },
  "api/ClassLibraryCS.Collections.Generator.html": {
    "href": "api/ClassLibraryCS.Collections.Generator.html",
    "title": "Class Generator | Lab3",
    "summary": "Class Generator Namespace ClassLibraryCS.Collections Assembly ClassLibraryCS.dll A utility class that generates random data, including arrays and dynamic arrays. public static class Generator Inheritance object Generator Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields Rand A static instance of the Random class for generating random numbers. public static readonly Random Rand Field Value Random Methods GetRandomArray<T>(Range, Func<T>) Generates a random array of type T with a random size within the given range and populates it with items generated by the provided function. public static T[] GetRandomArray<T>(Range sizeRange, Func<T> getItem) Parameters sizeRange Range A range specifying the minimum and maximum size of the array. getItem Func<T> A function that generates items for the array. Returns T[] An array of random items. Type Parameters T The type of the items in the array. Exceptions ArgumentOutOfRangeException Thrown if the sizeRange is not valid (e.g., if sizeRange.Start.Value is greater than sizeRange.End.Value). GetRandomDoubleArray(Range, int) Generates a random double array with a random size within the given range, with values in the range from -maxAbs to maxAbs. public static double[] GetRandomDoubleArray(Range sizeRange, int maxAbs) Parameters sizeRange Range A range specifying the minimum and maximum size of the array. maxAbs int The maximum absolute value for each double in the array. Returns double[] An array of random doubles. Exceptions ArgumentOutOfRangeException Thrown if the sizeRange is not valid. GetRandomDynArray<T>(Range, Func<T>) Generates a random DynArray of a random size within the given range and populates it with items generated by the provided function. public static DynArray<T> GetRandomDynArray<T>(Range sizeRange, Func<T> getItem) Parameters sizeRange Range A range specifying the minimum and maximum size of the array. getItem Func<T> A function that generates items for the array. Returns DynArray<T> A DynArray<T> containing random items. Type Parameters T The type of the items in the array. Exceptions ArgumentOutOfRangeException Thrown if the sizeRange is not valid (e.g., if sizeRange.Start.Value is greater than sizeRange.End.Value). GetRandomIntArray(Range, int) Generates a random integer array with a random size within the given range, with values in the range from -maxAbs to maxAbs. public static int[] GetRandomIntArray(Range sizeRange, int maxAbs) Parameters sizeRange Range A range specifying the minimum and maximum size of the array. maxAbs int The maximum absolute value for each integer in the array. Returns int[] An array of random integers. Exceptions ArgumentOutOfRangeException Thrown if the sizeRange is not valid."
  },
  "api/ClassLibraryCS.Collections.html": {
    "href": "api/ClassLibraryCS.Collections.html",
    "title": "Namespace ClassLibraryCS.Collections | Lab3",
    "summary": "Namespace ClassLibraryCS.Collections Classes DynArray<T> A dynamic array that automatically resizes itself as elements are added or removed. Generator A utility class that generates random data, including arrays and dynamic arrays."
  },
  "api/ClassLibraryCS.FunctionalEnumerableOperations.Enumerable.html": {
    "href": "api/ClassLibraryCS.FunctionalEnumerableOperations.Enumerable.html",
    "title": "Class Enumerable | Lab3",
    "summary": "Class Enumerable Namespace ClassLibraryCS.FunctionalEnumerableOperations Assembly ClassLibraryCS.dll Provides extension methods for working with sequences, including transformations, filtering, and taking elements. public static class Enumerable Inheritance object Enumerable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods All<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Determines whether all elements of a sequence satisfy a specified condition. public static bool All<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> The sequence to check. predicate Func<TSource, bool> A function that defines the condition to test each element against. Returns bool true if every element in the sequence satisfies the condition; otherwise, false. Type Parameters TSource The type of the elements in the sequence. Any<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Determines whether any element of a sequence satisfies a specified condition. public static bool Any<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> The sequence to check. predicate Func<TSource, bool> A function that defines the condition to test each element against. Returns bool true if any element in the sequence satisfies the condition; otherwise, false. Type Parameters TSource The type of the elements in the sequence. Enumerate<TSource>(IEnumerable<TSource>) Enumerates a sequence and returns each element along with its index. public static IEnumerable<(TSource item, int i)> Enumerate<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> The sequence to enumerate. Returns IEnumerable<(TSource item, int i)> An IEnumerable<T> where each element is paired with its index in the sequence. Type Parameters TSource The type of the elements in the sequence. Filter<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Filters a sequence of elements based on a specified predicate. public static IEnumerable<TSource> Filter<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> The sequence to filter. predicate Func<TSource, bool> A function that determines whether an element should be included in the result. Returns IEnumerable<TSource> An IEnumerable<T> containing only elements that satisfy the predicate. Type Parameters TSource The type of the elements in the sequence. Filter<TSource>(IEnumerable<TSource>, Func<TSource, int, bool>) Filters a sequence of elements based on a specified predicate that also considers the element's index. public static IEnumerable<TSource> Filter<TSource>(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate) Parameters source IEnumerable<TSource> The sequence to filter. predicate Func<TSource, int, bool> A function that determines whether an element, based on its value and index, should be included in the result. Returns IEnumerable<TSource> An IEnumerable<T> containing only elements that satisfy the predicate. Type Parameters TSource The type of the elements in the sequence. FirstOrDefault<TSource>(IEnumerable<TSource>) Returns the first element in a sequence, or default if no element is found. public static TSource? FirstOrDefault<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> The sequence to find the first element from. Returns TSource The first element in the sequence, or default if the sequence is empty. Type Parameters TSource The type of the elements in the sequence. FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Returns the first element in a sequence that satisfies a specified condition, or default if no such element is found. public static TSource? FirstOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> The sequence to search for the first element. predicate Func<TSource, bool> A function to test each element for a condition. Returns TSource The first element in the sequence that satisfies the condition, or default if no such element is found. Type Parameters TSource The type of the elements in the sequence. FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, bool>, TSource) Returns the first element in a sequence that satisfies a specified condition, or a specified default value if no such element is found. public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate, TSource defaultValue) Parameters source IEnumerable<TSource> The sequence to search for the first element. predicate Func<TSource, bool> A function to test each element for a condition. defaultValue TSource The value to return if no element satisfies the condition. Returns TSource The first element in the sequence that satisfies the condition, or the specified defaultValue if no such element is found. Type Parameters TSource The type of the elements in the sequence. Fold<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>) Performs a cumulative operation on a sequence, applying a function to each element and the accumulated result. public static TSource Fold<TSource>(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func) Parameters source IEnumerable<TSource> The sequence of elements to apply the operation on. func Func<TSource, TSource, TSource> A function that combines the accumulated result with each element in the sequence. Returns TSource The result of the fold operation over the sequence. Type Parameters TSource The type of the elements in the sequence. Exceptions InvalidOperationException Thrown if the source sequence is empty. Fold<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>) Performs a cumulative operation on a sequence, applying a function to each element and an accumulator value. public static TAccumulate Fold<TSource, TAccumulate>(this IEnumerable<TSource> source, TAccumulate initial, Func<TAccumulate, TSource, TAccumulate> func) Parameters source IEnumerable<TSource> The sequence of elements to apply the operation on. initial TAccumulate The initial value for the accumulator. func Func<TAccumulate, TSource, TAccumulate> A function that combines the accumulator with each element in the sequence. Returns TAccumulate The final accumulated result after applying the function to each element. Type Parameters TSource The type of the elements in the sequence. TAccumulate The type of the accumulator value. Let<TSource, TResult>(TSource, Func<TSource, TResult>) Allows you to perform an operation on a value and return the result of that operation. public static TResult Let<TSource, TResult>(this TSource value, Func<TSource, TResult> func) Parameters value TSource The value to apply the operation to. func Func<TSource, TResult> A function that performs an operation on the value and returns a result. Returns TResult The result of applying the function to the value. Type Parameters TSource The type of the value to operate on. TResult The type of the result returned by the operation. Map<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Projects each element of a sequence into a new form using the specified selector function. public static IEnumerable<TResult> Map<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) Parameters source IEnumerable<TSource> The sequence of elements to transform. selector Func<TSource, TResult> A function to apply to each element. Returns IEnumerable<TResult> An IEnumerable<T> with transformed elements. Type Parameters TSource The type of the elements in the source sequence. TResult The type of the elements in the resulting sequence. Max<TSource>(IEnumerable<TSource>) Returns the maximum element in a sequence based on the implemented comparison operators for the type. public static TSource? Max<TSource>(this IEnumerable<TSource> source) where TSource : IComparisonOperators<TSource, TSource, bool> Parameters source IEnumerable<TSource> The sequence to find the maximum element from. Returns TSource The maximum element in the sequence, or default if the sequence is empty. Type Parameters TSource The type of the elements in the sequence, which must implementIComparisonOperators<TSelf, TOther, TResult>. Max<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Projects each element of a sequence to a value and returns the maximum value according to the provided selector function. public static TResult? Max<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) where TResult : IComparisonOperators<TResult, TResult, bool> Parameters source IEnumerable<TSource> The sequence to find the maximum value from. selector Func<TSource, TResult> A function to select a value from each element. Returns TResult The maximum value selected from the sequence, or default if the sequence is empty. Type Parameters TSource The type of the elements in the sequence. TResult The type of the values returned by the selector function, which must implement IComparisonOperators<TSelf, TOther, TResult>. Min<TSource>(IEnumerable<TSource>) Returns the minimum element in a sequence based on the implemented comparison operators for the type. public static TSource? Min<TSource>(this IEnumerable<TSource> source) where TSource : IComparisonOperators<TSource, TSource, bool> Parameters source IEnumerable<TSource> The sequence to find the minimum element from. Returns TSource The minimum element in the sequence, or default if the sequence is empty. Type Parameters TSource The type of the elements in the sequence, which must implement IComparisonOperators<TSelf, TOther, TResult>. Min<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Projects each element of a sequence to a value and returns the minimum value according to the provided selector function. public static TResult? Min<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) where TResult : IComparisonOperators<TResult, TResult, bool> Parameters source IEnumerable<TSource> The sequence to find the minimum value from. selector Func<TSource, TResult> A function to select a value from each element. Returns TResult The minimum value selected from the sequence, or default if the sequence is empty. Type Parameters TSource The type of the elements in the sequence. TResult The type of the values returned by the selector function, which must implement IComparisonOperators<TSelf, TOther, TResult>. OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>?) Sorts the elements of a sequence in descending order according to a key selector function. public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey>? comparer = null) Parameters source IEnumerable<TSource> The sequence to sort. keySelector Func<TSource, TKey> A function to extract the key to compare elements by. comparer IComparer<TKey> An optional IComparer<T> to compare keys, or null to use the default comparer. Returns IOrderedEnumerable<TSource> An ordered sequence of elements in descending order based on the selected key. Type Parameters TSource The type of the elements in the sequence. TKey The type of the key used to compare elements. OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>?) Sorts the elements of a sequence in ascending order according to a key selector function. public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey>? comparer = null) Parameters source IEnumerable<TSource> The sequence to sort. keySelector Func<TSource, TKey> A function to extract the key to compare elements by. comparer IComparer<TKey> An optional IComparer<T> to compare keys, or null to use the default comparer. Returns IOrderedEnumerable<TSource> An ordered sequence of elements in ascending order based on the selected key. Type Parameters TSource The type of the elements in the sequence. TKey The type of the key used to compare elements. SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. public static IEnumerable<TSource> SkipWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> The sequence to skip elements from. predicate Func<TSource, bool> A function to test each element for a condition. The elements are skipped as long as the condition is true. Returns IEnumerable<TSource> An IEnumerable<T> containing the remaining elements after the predicate condition becomes false. Type Parameters TSource The type of the elements in the sequence. Skip<TSource>(IEnumerable<TSource>, int) Bypasses a specified number of elements in a sequence and returns the remaining elements. public static IEnumerable<TSource> Skip<TSource>(this IEnumerable<TSource> source, int count) Parameters source IEnumerable<TSource> The sequence to skip elements from. count int The number of elements to skip. Returns IEnumerable<TSource> An IEnumerable<T> containing the remaining elements after the specified number of elements has been skipped. Type Parameters TSource The type of the elements in the sequence. TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Returns elements from the start of a sequence as long as the specified condition is true. public static IEnumerable<TSource> TakeWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> The sequence to take elements from. predicate Func<TSource, bool> A function to test each element for a condition. The elements are returned as long as the condition is true. Returns IEnumerable<TSource> An IEnumerable<T> containing elements from the start of the sequence until the predicate fails. Type Parameters TSource The type of the elements in the sequence. Take<TSource>(IEnumerable<TSource>, int) Returns a specified number of contiguous elements from the start of a sequence. public static IEnumerable<TSource> Take<TSource>(this IEnumerable<TSource> source, int count) Parameters source IEnumerable<TSource> The sequence to take elements from. count int The number of elements to take from the start of the sequence. Returns IEnumerable<TSource> An IEnumerable<T> containing the first count elements of the sequence. Type Parameters TSource The type of the elements in the sequence. ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>?) Performs a subsequent ordering of elements in a sequence in descending order according to a key selector function. public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey>? comparer = null) Parameters source IOrderedEnumerable<TSource> The previously ordered sequence to further sort. keySelector Func<TSource, TKey> A function to extract the key to compare elements by. comparer IComparer<TKey> An optional IComparer<T> to compare keys, or null to use the default comparer. Returns IOrderedEnumerable<TSource> An ordered sequence of elements in descending order based on the selected key. Type Parameters TSource The type of the elements in the sequence. TKey The type of the key used to compare elements. ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>?) Performs a subsequent ordering of elements in a sequence in ascending order according to a key selector function. public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey>? comparer = null) Parameters source IOrderedEnumerable<TSource> The previously ordered sequence to further sort. keySelector Func<TSource, TKey> A function to extract the key to compare elements by. comparer IComparer<TKey> An optional IComparer<T> to compare keys, or null to use the default comparer. Returns IOrderedEnumerable<TSource> An ordered sequence of elements in ascending order based on the selected key. Type Parameters TSource The type of the elements in the sequence. TKey The type of the key used to compare elements. ToArray<TSource>(IEnumerable<TSource>) Creates an array from a sequence of elements. public static TSource[] ToArray<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> The sequence to convert to an array. Returns TSource[] An array containing the elements from the sequence. Type Parameters TSource The type of the elements in the sequence. ToDynArray<TSource>(IEnumerable<TSource>) Creates a DynArray<T> from a sequence of elements. public static DynArray<TSource> ToDynArray<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> The sequence to convert to a dynamic array. Returns DynArray<TSource> A DynArray<T> containing the elements from the sequence. Type Parameters TSource The type of the elements in the sequence. ToList<TSource>(IEnumerable<TSource>) Creates a List<T> from a sequence of elements. public static List<TSource> ToList<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> The sequence to convert to a list. Returns List<TSource> A List<T> containing the elements from the sequence. Type Parameters TSource The type of the elements in the sequence. ToSet<TSource>(IEnumerable<TSource>) Creates a HashSet<T> from a sequence of elements. public static HashSet<TSource> ToSet<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> The sequence to convert to a hash set. Returns HashSet<TSource> A HashSet<T> containing the elements from the sequence, with duplicates removed. Type Parameters TSource The type of the elements in the sequence."
  },
  "api/ClassLibraryCS.FunctionalEnumerableOperations.html": {
    "href": "api/ClassLibraryCS.FunctionalEnumerableOperations.html",
    "title": "Namespace ClassLibraryCS.FunctionalEnumerableOperations | Lab3",
    "summary": "Namespace ClassLibraryCS.FunctionalEnumerableOperations Classes Enumerable Provides extension methods for working with sequences, including transformations, filtering, and taking elements."
  },
  "api/ClassLibraryCS.FunctionalOperations.Enumerable.html": {
    "href": "api/ClassLibraryCS.FunctionalOperations.Enumerable.html",
    "title": "Class Enumerable | Lab3",
    "summary": "Class Enumerable Namespace ClassLibraryCS.FunctionalOperations Assembly ClassLibraryCS.dll Provides extension methods for working with sequences, including transformations, filtering, and taking elements. public static class Enumerable Inheritance object Enumerable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods All<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Determines whether all elements of a sequence satisfy a specified condition. public static bool All<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> The sequence to check. predicate Func<TSource, bool> A function that defines the condition to test each element against. Returns bool true if every element in the sequence satisfies the condition; otherwise, false. Type Parameters TSource The type of the elements in the sequence. Any<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Determines whether any element of a sequence satisfies a specified condition. public static bool Any<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> The sequence to check. predicate Func<TSource, bool> A function that defines the condition to test each element against. Returns bool true if any element in the sequence satisfies the condition; otherwise, false. Type Parameters TSource The type of the elements in the sequence. Enumerate<TSource>(IEnumerable<TSource>) Enumerates a sequence and returns each element along with its index. public static IEnumerable<(TSource item, int i)> Enumerate<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> The sequence to enumerate. Returns IEnumerable<(TSource item, int i)> An IEnumerable<T> where each element is paired with its index in the sequence. Type Parameters TSource The type of the elements in the sequence. Filter<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Filters a sequence of elements based on a specified predicate. public static IEnumerable<TSource> Filter<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> The sequence to filter. predicate Func<TSource, bool> A function that determines whether an element should be included in the result. Returns IEnumerable<TSource> An IEnumerable<T> containing only elements that satisfy the predicate. Type Parameters TSource The type of the elements in the sequence. Filter<TSource>(IEnumerable<TSource>, Func<TSource, int, bool>) Filters a sequence of elements based on a specified predicate that also considers the element's index. public static IEnumerable<TSource> Filter<TSource>(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate) Parameters source IEnumerable<TSource> The sequence to filter. predicate Func<TSource, int, bool> A function that determines whether an element, based on its value and index, should be included in the result. Returns IEnumerable<TSource> An IEnumerable<T> containing only elements that satisfy the predicate. Type Parameters TSource The type of the elements in the sequence. FirstOrDefault<TSource>(IEnumerable<TSource>) Returns the first element in a sequence, or default if no element is found. public static TSource? FirstOrDefault<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> The sequence to find the first element from. Returns TSource The first element in the sequence, or default if the sequence is empty. Type Parameters TSource The type of the elements in the sequence. FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Returns the first element in a sequence that satisfies a specified condition, or default if no such element is found. public static TSource? FirstOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> The sequence to search for the first element. predicate Func<TSource, bool> A function to test each element for a condition. Returns TSource The first element in the sequence that satisfies the condition, or default if no such element is found. Type Parameters TSource The type of the elements in the sequence. FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, bool>, TSource) Returns the first element in a sequence that satisfies a specified condition, or a specified default value if no such element is found. public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate, TSource defaultValue) Parameters source IEnumerable<TSource> The sequence to search for the first element. predicate Func<TSource, bool> A function to test each element for a condition. defaultValue TSource The value to return if no element satisfies the condition. Returns TSource The first element in the sequence that satisfies the condition, or the specified defaultValue if no such element is found. Type Parameters TSource The type of the elements in the sequence. Fold<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>) Performs a cumulative operation on a sequence, applying a function to each element and the accumulated result. public static TSource Fold<TSource>(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func) Parameters source IEnumerable<TSource> The sequence of elements to apply the operation on. func Func<TSource, TSource, TSource> A function that combines the accumulated result with each element in the sequence. Returns TSource The result of the fold operation over the sequence. Type Parameters TSource The type of the elements in the sequence. Exceptions InvalidOperationException Thrown if the source sequence is empty. Fold<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>) Performs a cumulative operation on a sequence, applying a function to each element and an accumulator value. public static TAccumulate Fold<TSource, TAccumulate>(this IEnumerable<TSource> source, TAccumulate initial, Func<TAccumulate, TSource, TAccumulate> func) Parameters source IEnumerable<TSource> The sequence of elements to apply the operation on. initial TAccumulate The initial value for the accumulator. func Func<TAccumulate, TSource, TAccumulate> A function that combines the accumulator with each element in the sequence. Returns TAccumulate The final accumulated result after applying the function to each element. Type Parameters TSource The type of the elements in the sequence. TAccumulate The type of the accumulator value. Let<TSource, TResult>(TSource, Func<TSource, TResult>) Allows you to perform an operation on a value and return the result of that operation. public static TResult Let<TSource, TResult>(this TSource value, Func<TSource, TResult> func) Parameters value TSource The value to apply the operation to. func Func<TSource, TResult> A function that performs an operation on the value and returns a result. Returns TResult The result of applying the function to the value. Type Parameters TSource The type of the value to operate on. TResult The type of the result returned by the operation. Map<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Projects each element of a sequence into a new form using the specified selector function. public static IEnumerable<TResult> Map<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) Parameters source IEnumerable<TSource> The sequence of elements to transform. selector Func<TSource, TResult> A function to apply to each element. Returns IEnumerable<TResult> An IEnumerable<T> with transformed elements. Type Parameters TSource The type of the elements in the source sequence. TResult The type of the elements in the resulting sequence. Max<TSource>(IEnumerable<TSource>) Returns the maximum element in a sequence based on the implemented comparison operators for the type. public static TSource? Max<TSource>(this IEnumerable<TSource> source) where TSource : IComparisonOperators<TSource, TSource, bool> Parameters source IEnumerable<TSource> The sequence to find the maximum element from. Returns TSource The maximum element in the sequence, or default if the sequence is empty. Type Parameters TSource The type of the elements in the sequence, which must implementIComparisonOperators<TSelf, TOther, TResult>. Max<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Projects each element of a sequence to a value and returns the maximum value according to the provided selector function. public static TResult? Max<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) where TResult : IComparisonOperators<TResult, TResult, bool> Parameters source IEnumerable<TSource> The sequence to find the maximum value from. selector Func<TSource, TResult> A function to select a value from each element. Returns TResult The maximum value selected from the sequence, or default if the sequence is empty. Type Parameters TSource The type of the elements in the sequence. TResult The type of the values returned by the selector function, which must implement IComparisonOperators<TSelf, TOther, TResult>. Min<TSource>(IEnumerable<TSource>) Returns the minimum element in a sequence based on the implemented comparison operators for the type. public static TSource? Min<TSource>(this IEnumerable<TSource> source) where TSource : IComparisonOperators<TSource, TSource, bool> Parameters source IEnumerable<TSource> The sequence to find the minimum element from. Returns TSource The minimum element in the sequence, or default if the sequence is empty. Type Parameters TSource The type of the elements in the sequence, which must implement IComparisonOperators<TSelf, TOther, TResult>. Min<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Projects each element of a sequence to a value and returns the minimum value according to the provided selector function. public static TResult? Min<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) where TResult : IComparisonOperators<TResult, TResult, bool> Parameters source IEnumerable<TSource> The sequence to find the minimum value from. selector Func<TSource, TResult> A function to select a value from each element. Returns TResult The minimum value selected from the sequence, or default if the sequence is empty. Type Parameters TSource The type of the elements in the sequence. TResult The type of the values returned by the selector function, which must implement IComparisonOperators<TSelf, TOther, TResult>. OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>?) Sorts the elements of a sequence in descending order according to a key selector function. public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey>? comparer = null) Parameters source IEnumerable<TSource> The sequence to sort. keySelector Func<TSource, TKey> A function to extract the key to compare elements by. comparer IComparer<TKey> An optional IComparer<T> to compare keys, or null to use the default comparer. Returns IOrderedEnumerable<TSource> An ordered sequence of elements in descending order based on the selected key. Type Parameters TSource The type of the elements in the sequence. TKey The type of the key used to compare elements. OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>?) Sorts the elements of a sequence in ascending order according to a key selector function. public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey>? comparer = null) Parameters source IEnumerable<TSource> The sequence to sort. keySelector Func<TSource, TKey> A function to extract the key to compare elements by. comparer IComparer<TKey> An optional IComparer<T> to compare keys, or null to use the default comparer. Returns IOrderedEnumerable<TSource> An ordered sequence of elements in ascending order based on the selected key. Type Parameters TSource The type of the elements in the sequence. TKey The type of the key used to compare elements. SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. public static IEnumerable<TSource> SkipWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> The sequence to skip elements from. predicate Func<TSource, bool> A function to test each element for a condition. The elements are skipped as long as the condition is true. Returns IEnumerable<TSource> An IEnumerable<T> containing the remaining elements after the predicate condition becomes false. Type Parameters TSource The type of the elements in the sequence. Skip<TSource>(IEnumerable<TSource>, int) Bypasses a specified number of elements in a sequence and returns the remaining elements. public static IEnumerable<TSource> Skip<TSource>(this IEnumerable<TSource> source, int count) Parameters source IEnumerable<TSource> The sequence to skip elements from. count int The number of elements to skip. Returns IEnumerable<TSource> An IEnumerable<T> containing the remaining elements after the specified number of elements has been skipped. Type Parameters TSource The type of the elements in the sequence. TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Returns elements from the start of a sequence as long as the specified condition is true. public static IEnumerable<TSource> TakeWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> The sequence to take elements from. predicate Func<TSource, bool> A function to test each element for a condition. The elements are returned as long as the condition is true. Returns IEnumerable<TSource> An IEnumerable<T> containing elements from the start of the sequence until the predicate fails. Type Parameters TSource The type of the elements in the sequence. Take<TSource>(IEnumerable<TSource>, int) Returns a specified number of contiguous elements from the start of a sequence. public static IEnumerable<TSource> Take<TSource>(this IEnumerable<TSource> source, int count) Parameters source IEnumerable<TSource> The sequence to take elements from. count int The number of elements to take from the start of the sequence. Returns IEnumerable<TSource> An IEnumerable<T> containing the first count elements of the sequence. Type Parameters TSource The type of the elements in the sequence. ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>?) Performs a subsequent ordering of elements in a sequence in descending order according to a key selector function. public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey>? comparer = null) Parameters source IOrderedEnumerable<TSource> The previously ordered sequence to further sort. keySelector Func<TSource, TKey> A function to extract the key to compare elements by. comparer IComparer<TKey> An optional IComparer<T> to compare keys, or null to use the default comparer. Returns IOrderedEnumerable<TSource> An ordered sequence of elements in descending order based on the selected key. Type Parameters TSource The type of the elements in the sequence. TKey The type of the key used to compare elements. ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>?) Performs a subsequent ordering of elements in a sequence in ascending order according to a key selector function. public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey>? comparer = null) Parameters source IOrderedEnumerable<TSource> The previously ordered sequence to further sort. keySelector Func<TSource, TKey> A function to extract the key to compare elements by. comparer IComparer<TKey> An optional IComparer<T> to compare keys, or null to use the default comparer. Returns IOrderedEnumerable<TSource> An ordered sequence of elements in ascending order based on the selected key. Type Parameters TSource The type of the elements in the sequence. TKey The type of the key used to compare elements. ToArray<TSource>(IEnumerable<TSource>) Creates an array from a sequence of elements. public static TSource[] ToArray<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> The sequence to convert to an array. Returns TSource[] An array containing the elements from the sequence. Type Parameters TSource The type of the elements in the sequence. ToDynArray<TSource>(IEnumerable<TSource>) Creates a DynArray<T> from a sequence of elements. public static DynArray<TSource> ToDynArray<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> The sequence to convert to a dynamic array. Returns DynArray<TSource> A DynArray<T> containing the elements from the sequence. Type Parameters TSource The type of the elements in the sequence. ToList<TSource>(IEnumerable<TSource>) Creates a List<T> from a sequence of elements. public static List<TSource> ToList<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> The sequence to convert to a list. Returns List<TSource> A List<T> containing the elements from the sequence. Type Parameters TSource The type of the elements in the sequence. ToSet<TSource>(IEnumerable<TSource>) Creates a HashSet<T> from a sequence of elements. public static HashSet<TSource> ToSet<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> The sequence to convert to a hash set. Returns HashSet<TSource> A HashSet<T> containing the elements from the sequence, with duplicates removed. Type Parameters TSource The type of the elements in the sequence."
  },
  "api/ClassLibraryCS.FunctionalOperations.html": {
    "href": "api/ClassLibraryCS.FunctionalOperations.html",
    "title": "Namespace ClassLibraryCS.FunctionalOperations | Lab3",
    "summary": "Namespace ClassLibraryCS.FunctionalOperations Classes Enumerable Provides extension methods for working with sequences, including transformations, filtering, and taking elements."
  },
  "api/ClassLibraryFS.Coloring.StringExtension.html": {
    "href": "api/ClassLibraryFS.Coloring.StringExtension.html",
    "title": "Class Coloring.StringExtension | Lab3",
    "summary": "Class Coloring.StringExtension Namespace ClassLibraryFS Assembly ClassLibraryFS.dll Extension method for strings to wrap them in ANSI escape codes for a given ConsoleColor. [CompilationMapping(SourceConstructFlags.ObjectType)] public class Coloring.StringExtension Inheritance object Coloring.StringExtension Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods Enumerable.Let<TSource, TResult>(TSource, Func<TSource, TResult>) Constructors StringExtension() public StringExtension() Methods WrapEscColor(string, ConsoleColor) Wraps the string in ANSI escape codes using the specified ConsoleColor. public static string WrapEscColor(this string str, ConsoleColor color) Parameters str string The string to format. color ConsoleColor The ConsoleColor to apply. Returns string The ANSI-colored string."
  },
  "api/ClassLibraryFS.Coloring.Theme.html": {
    "href": "api/ClassLibraryFS.Coloring.Theme.html",
    "title": "Class Coloring.Theme | Lab3",
    "summary": "Class Coloring.Theme Namespace ClassLibraryFS Assembly ClassLibraryFS.dll Represents a color theme for console output. [CompilationMapping(SourceConstructFlags.RecordType)] public sealed class Coloring.Theme : IEquatable<Coloring.Theme>, IStructuralEquatable, IComparable<Coloring.Theme>, IComparable, IStructuralComparable Inheritance object Coloring.Theme Implements IEquatable<Coloring.Theme> IStructuralEquatable IComparable<Coloring.Theme> IComparable IStructuralComparable Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods Enumerable.Let<TSource, TResult>(TSource, Func<TSource, TResult>) Constructors Theme(ConsoleColor, ConsoleColor, ConsoleColor, ConsoleColor, ConsoleColor) public Theme(ConsoleColor border, ConsoleColor header, ConsoleColor key, ConsoleColor value, ConsoleColor other) Parameters border ConsoleColor header ConsoleColor key ConsoleColor value ConsoleColor other ConsoleColor Properties BlueAccents Represents a blue accent color scheme with blue borders and cyan accents for other elements. public static Coloring.Theme BlueAccents { get; } Property Value Coloring.Theme Border The color used for borders. [CompilationMapping(SourceConstructFlags.Field, 0)] public ConsoleColor Border { get; } Property Value ConsoleColor Classic Represents the classic color scheme for the application with green headers, yellow keys, and magenta for other elements. public static Coloring.Theme Classic { get; } Property Value Coloring.Theme Cold Represents a cold theme with cyan borders and blue accents, creating a cool and fresh visual style. public static Coloring.Theme Cold { get; } Property Value Coloring.Theme Default Represents the default color scheme for the application. All elements are displayed in gray. public static Coloring.Theme Default { get; } Property Value Coloring.Theme Forest Represents a forest-inspired theme with dark green and green accents to create an earthy, nature-filled atmosphere. public static Coloring.Theme Forest { get; } Property Value Coloring.Theme Hackerman Represents a hacker-inspired color scheme with dark green and green accents throughout the interface. public static Coloring.Theme Hackerman { get; } Property Value Coloring.Theme Header The color used for headers. [CompilationMapping(SourceConstructFlags.Field, 1)] public ConsoleColor Header { get; } Property Value ConsoleColor Key The color used for keys. [CompilationMapping(SourceConstructFlags.Field, 2)] public ConsoleColor Key { get; } Property Value ConsoleColor Ocean Represents an ocean-inspired color scheme with blue and cyan elements, reflecting the colors of the sea. public static Coloring.Theme Ocean { get; } Property Value Coloring.Theme Other The color used for miscellaneous elements. [CompilationMapping(SourceConstructFlags.Field, 4)] public ConsoleColor Other { get; } Property Value ConsoleColor Sunset Represents a sunset-themed color scheme with dark red borders and yellow headers, evoking the colors of a sunset. public static Coloring.Theme Sunset { get; } Property Value Coloring.Theme Value The color used for values. [CompilationMapping(SourceConstructFlags.Field, 3)] public ConsoleColor Value { get; } Property Value ConsoleColor Warm Represents a warm theme with red borders, yellow headers, and magenta for keys, providing a warm and cozy feel. public static Coloring.Theme Warm { get; } Property Value Coloring.Theme themes A collection of predefined themes accessible by name. public static FSharpMap<string, Coloring.Theme> themes { get; } Property Value FSharpMap<string, Coloring.Theme> Methods CompareTo(Theme) public override sealed int CompareTo(Coloring.Theme obj) Parameters obj Coloring.Theme Returns int CompareTo(object) public override sealed int CompareTo(object obj) Parameters obj object Returns int CompareTo(object, IComparer) public override sealed int CompareTo(object obj, IComparer comp) Parameters obj object comp IComparer Returns int Equals(Theme) public override sealed bool Equals(Coloring.Theme obj) Parameters obj Coloring.Theme Returns bool Equals(Theme, IEqualityComparer) public bool Equals(Coloring.Theme obj, IEqualityComparer comp) Parameters obj Coloring.Theme comp IEqualityComparer Returns bool Equals(object) public override sealed bool Equals(object obj) Parameters obj object Returns bool Equals(object, IEqualityComparer) public override sealed bool Equals(object obj, IEqualityComparer comp) Parameters obj object comp IEqualityComparer Returns bool GetHashCode() public override sealed int GetHashCode() Returns int GetHashCode(IEqualityComparer) public override sealed int GetHashCode(IEqualityComparer comp) Parameters comp IEqualityComparer Returns int ToString() public override string ToString() Returns string parseTheme(string) Parses a theme by name. If not found, returns the default theme. public static Coloring.Theme parseTheme(string str) Parameters str string The name of the theme. Returns Coloring.Theme The corresponding Theme if found, otherwise Default."
  },
  "api/ClassLibraryFS.Coloring.WrapEscColor.html": {
    "href": "api/ClassLibraryFS.Coloring.WrapEscColor.html",
    "title": "Class Coloring.WrapEscColor | Lab3",
    "summary": "Class Coloring.WrapEscColor Namespace ClassLibraryFS Assembly ClassLibraryFS.dll Extension method for strings to wrap them in ANSI escape codes for a given ConsoleColor. [CompilationMapping(SourceConstructFlags.ObjectType)] public class Coloring.WrapEscColor Inheritance object Coloring.WrapEscColor Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods Enumerable.Let<TSource, TResult>(TSource, Func<TSource, TResult>) Constructors WrapEscColor() public WrapEscColor() Methods WrapEscColor(string, ConsoleColor) Wraps the string in ANSI escape codes using the specified ConsoleColor. public static string WrapEscColor(this string str, ConsoleColor color) Parameters str string The string to format. color ConsoleColor The ConsoleColor to apply. Returns string The ANSI-colored string."
  },
  "api/ClassLibraryFS.Coloring.WrapEscColorExtension.html": {
    "href": "api/ClassLibraryFS.Coloring.WrapEscColorExtension.html",
    "title": "Class Coloring.WrapEscColorExtension | Lab3",
    "summary": "Class Coloring.WrapEscColorExtension Namespace ClassLibraryFS Assembly ClassLibraryFS.dll Extension method for strings to wrap them in ANSI escape codes for a given ConsoleColor. [CompilationMapping(SourceConstructFlags.ObjectType)] public class Coloring.WrapEscColorExtension Inheritance object Coloring.WrapEscColorExtension Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods Enumerable.Let<TSource, TResult>(TSource, Func<TSource, TResult>) Constructors WrapEscColorExtension() public WrapEscColorExtension() Methods WrapEscColor(string, ConsoleColor) Wraps the string in ANSI escape codes using the specified ConsoleColor. public static string WrapEscColor(this string str, ConsoleColor color) Parameters str string The string to format. color ConsoleColor The ConsoleColor to apply. Returns string The ANSI-colored string."
  },
  "api/ClassLibraryFS.Coloring.html": {
    "href": "api/ClassLibraryFS.Coloring.html",
    "title": "Class Coloring | Lab3",
    "summary": "Class Coloring Namespace ClassLibraryFS Assembly ClassLibraryFS.dll A module that provides support for theming and ANSI color formatting in the console. [CompilationMapping(SourceConstructFlags.Module)] public static class Coloring Inheritance object Coloring Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods op_EqualsGreaterGreater(ConsoleColor, string) Colors a string using ANSI escape codes for a given ConsoleColor. [CompilationArgumentCounts(new int[] { 1, 1 })] public static string op_EqualsGreaterGreater(ConsoleColor color, string s) Parameters color ConsoleColor The color to use. s string The string to wrap in color. Returns string The string wrapped in ANSI color codes."
  },
  "api/ClassLibraryFS.ConsoleUI.IContext.html": {
    "href": "api/ClassLibraryFS.ConsoleUI.IContext.html",
    "title": "Interface ConsoleUI.IContext | Lab3",
    "summary": "Interface ConsoleUI.IContext Namespace ClassLibraryFS Assembly ClassLibraryFS.dll Defines the interface for an execution context that interacts with the user. [Interface] [CompilationMapping(SourceConstructFlags.ObjectType)] public interface ConsoleUI.IContext Extension Methods Enumerable.Let<TSource, TResult>(TSource, Func<TSource, TResult>) Properties GlobalTheme Gets the current console color theme. Coloring.Theme GlobalTheme { get; } Property Value Coloring.Theme HelpMenu Gets the help menu string. string HelpMenu { get; } Property Value string Reader Gets the input stream. TextReader Reader { get; } Property Value TextReader TalkToUser Indicates whether the context should interact with the user. bool TalkToUser { get; } Property Value bool Writer Gets the output stream. TextWriter Writer { get; } Property Value TextWriter"
  },
  "api/ClassLibraryFS.ConsoleUI.html": {
    "href": "api/ClassLibraryFS.ConsoleUI.html",
    "title": "Class ConsoleUI | Lab3",
    "summary": "Class ConsoleUI Namespace ClassLibraryFS Assembly ClassLibraryFS.dll Provides utilities for console-based user interaction in CLI applications, including context abstraction, task parsing, description extraction, and styled table rendering with themes. [CompilationMapping(SourceConstructFlags.Module)] public static class ConsoleUI Inheritance object ConsoleUI Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods generateTable(string, IEnumerable<Tuple<string, string>>, Theme) Generates a formatted table string using Unicode box-drawing characters and ANSI colors. [CompilationArgumentCounts(new int[] { 1, 1, 1 })] public static string generateTable(string header, IEnumerable<Tuple<string, string>> keyValues, Coloring.Theme theme) Parameters header string The title displayed at the top of the table. keyValues IEnumerable<Tuple<string, string>> A sequence of key-description pairs to display in the table. theme Coloring.Theme The console color theme used for styling the table. Returns string A formatted string representing the styled table. getIndexedDescriptions<T>(IEnumerable<Tuple<int, string, Action<T>>>) Extracts indexed descriptions from a sequence. public static IEnumerable<Tuple<string, string>> getIndexedDescriptions<T>(IEnumerable<Tuple<int, string, Action<T>>> tasks) where T : ConsoleUI.IContext Parameters tasks IEnumerable<Tuple<int, string, Action<T>>> A sequence of (index, description, action) tuples. Returns IEnumerable<Tuple<string, string>> A sequence of (string index, description) pairs. Type Parameters T parseTasks<T>(IEnumerable<KeyValuePair<int, (Action<T>, string)>>) Parses task definitions from key-value blocks and assigns each a sequential index. public static IEnumerable<Tuple<int, string, Action<T>>> parseTasks<T>(IEnumerable<KeyValuePair<int, (Action<T>, string)>> blocks) where T : ConsoleUI.IContext Parameters blocks IEnumerable<KeyValuePair<int, (Action<T>, string)>> A sequence of key-value pairs with an action and description. Returns IEnumerable<Tuple<int, string, Action<T>>> A sequence of indexed tuples (index, description, action). Type Parameters T"
  },
  "api/ClassLibraryFS.Text.html": {
    "href": "api/ClassLibraryFS.Text.html",
    "title": "Class Text | Lab3",
    "summary": "Class Text Namespace ClassLibraryFS Assembly ClassLibraryFS.dll Provides helper functions for text formatting and numeric string processing, including string centering and digit counting. [CompilationMapping(SourceConstructFlags.Module)] public static class Text Inheritance object Text Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods center(string, int) Centers a string within the specified total width. [CompilationArgumentCounts(new int[] { 1, 1 })] public static string center(string s, int totalWidth) Parameters s string The string to center. totalWidth int The total width in which to center the string. Returns string A new string that is centered within the given width. numLength(int) Calculates the number of digits in an integer. public static int numLength(int n) Parameters n int The integer whose length is to be calculated. Returns int The number of digits in the integer."
  },
  "api/ClassLibraryFS.html": {
    "href": "api/ClassLibraryFS.html",
    "title": "Namespace ClassLibraryFS | Lab3",
    "summary": "Namespace ClassLibraryFS Classes Coloring A module that provides support for theming and ANSI color formatting in the console. Coloring.StringExtension Extension method for strings to wrap them in ANSI escape codes for a given ConsoleColor. Coloring.Theme Represents a color theme for console output. ConsoleUI Provides utilities for console-based user interaction in CLI applications, including context abstraction, task parsing, description extraction, and styled table rendering with themes. Text Provides helper functions for text formatting and numeric string processing, including string centering and digit counting. Interfaces ConsoleUI.IContext Defines the interface for an execution context that interacts with the user."
  },
  "api/ClassLibraryVB.IO.Context.html": {
    "href": "api/ClassLibraryVB.IO.Context.html",
    "title": "Class Context | Lab3",
    "summary": "Class Context Namespace ClassLibraryVB.IO Assembly ClassLibraryVB.dll Represents an execution context that implements ConsoleUI.IContext for reading input, writing output, and handling user interaction with color themes. public class Context : ConsoleUI.IContext Inheritance object Context Implements ConsoleUI.IContext Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods Enumerable.Let<TSource, TResult>(TSource, Func<TSource, TResult>) Constructors Context(TextReader, TextWriter, bool, Theme) Initializes a new instance of the Context class with the specified input/output streams, user interaction flag, and color theme. Automatically generates and prints the help menu. public Context(TextReader reader, TextWriter writer, bool talkToUser, Coloring.Theme globalTheme) Parameters reader TextReader The input stream. writer TextWriter The output stream. talkToUser bool Indicates whether to print messages to the user. globalTheme Coloring.Theme The theme used for color formatting. Methods Error(string) Prints an error message to the user, appending a New line at the end. public void Error(string message) Parameters message string The error message to be printed. Parse<T>(string) public static T Parse<T>(string input) where T : IParsable<T>, new() Parameters input string Returns T Type Parameters T Print(object, ConsoleColor?) Prints a message to the console without a newline, using the specified color. If the TalkToUser variable is set to True, the message will be written to the standard error stream (Console.Error). public void Print(object message, ConsoleColor? color = null) Parameters message object The message to print. color ConsoleColor? (Optional) The text color. Default is white. PrintLine(object, ConsoleColor?) Prints a message to the console with the specified color. If the TalkToUser variable is set to True, the message will be written to the standard error stream (Console.Error). public void PrintLine(object message, ConsoleColor? color = null) Parameters message object The message to print. color ConsoleColor? (Optional) The text color. Default is white. ReadArrayInline<T>() Requests elements from the user And collects them into an array. public DynArray<T> ReadArrayInline<T>() where T : IParsable<T>, new() Returns DynArray<T> An array of elements of type T entered by the user. Type Parameters T The type of the elements in the array, constrained to be IParsable. ReadArrayInline<T>(Converter<string, T>) Requests elements from the user And collects them into an array. public DynArray<T> ReadArrayInline<T>(Converter<string, T> converter) Parameters converter Converter<string, T> A function that converts each input string into the requested type. Returns DynArray<T> An array of elements of type T entered by the user. Type Parameters T The type of the elements in the array. ReadArrayRandom<T>(Func<T>) Requests the number of elements from the user And generates an array of random elements. public DynArray<T> ReadArrayRandom<T>(Func<T> getRandomItem) Parameters getRandomItem Func<T> A function that generates random elements of type T. Returns DynArray<T> An array of randomly generated elements of type T. Type Parameters T The type of the elements in the array. Request(string, RequestStyle) Requests a string input from the user And returns it. public string Request(string message = null, RequestStyle style = RequestStyle.Default) Parameters message string A message that guides the user on what to input. style RequestStyle The style of the request message. Returns string The user input as a string. Exceptions ДавайПоНовійException Thrown when the user chooses to return to the menu. ДоПобаченняException Thrown when the user chooses to exit the program. RequestArray<T>(Converter<string, T>, Func<T>) Requests the user to specify the input method for entering an array. public DynArray<T> RequestArray<T>(Converter<string, T> converter, Func<T> getRandomItem) Parameters converter Converter<string, T> A function that converts each input string into the requested type. getRandomItem Func<T> A function that generates random elements of type T. Returns DynArray<T> An array of elements of type T entered by the user. Type Parameters T The type of the elements in the array. RequestArray<T>(Func<T>) Requests the user to specify the input method for entering an array. public DynArray<T> RequestArray<T>(Func<T> getRandomItem) where T : IParsable<T>, new() Parameters getRandomItem Func<T> A function that generates random elements of type T. Returns DynArray<T> An array of elements of type T entered by the user. Type Parameters T The type of the elements in the array, constrained to be IParsable. RequestMatrix<T>(Converter<string, T>, Func<T>) Requests a matrix of elements, using a specified converter And random item generator. public DynArray<DynArray<T>> RequestMatrix<T>(Converter<string, T> converter, Func<T> getRandomItem) Parameters converter Converter<string, T> A function that converts each input string into the requested type. getRandomItem Func<T> A function that generates random elements of type T. Returns DynArray<DynArray<T>> A dynamically sized matrix (array of arrays) with parsed Or randomly generated elements. Type Parameters T The type of elements in the matrix, constrained to be parsable. RequestMatrix<T>(Func<T>) Requests a two-dimensional matrix of elements of type T, where T implements IParsable. public DynArray<DynArray<T>> RequestMatrix<T>(Func<T> getRandomItem) where T : IParsable<T>, new() Parameters getRandomItem Func<T> A function that generates random items of type T. Returns DynArray<DynArray<T>> A dynamically sized matrix (array of arrays) with elements of type T. Type Parameters T The type of the elements in the matrix, constrained to be IParsable. Request<T>(Converter<string, T>, string, RequestStyle) Requests input from the user, attempting to convert it to a specific type. If an exception occurs, an error message Is shown And the request Is retried. public T Request<T>(Converter<string, T> converter, string message = null, RequestStyle style = RequestStyle.Default) Parameters converter Converter<string, T> A function that converts the input string into the requested type. message string A message that guides the user on what to input. style RequestStyle The style of the request message. Returns T The user input converted to the specified type. Type Parameters T The type of the requested value. Exceptions ДавайПоНовійException Thrown when the user chooses to return to the menu. ДоПобаченняException Thrown when the user chooses to exit the program. Request<T>(string, RequestStyle) Requests input from the user, attempting to convert it to a specified type that implements IParsable. If an exception occurs, an error message Is shown And the request Is retried. public T Request<T>(string message = null, RequestStyle style = RequestStyle.Default) where T : IParsable<T>, new() Parameters message string A message that guides the user on what to input. style RequestStyle The style of the request message. Returns T The user input converted to the specified type. Type Parameters T The type of the requested value, constrained to be IParsable. Exceptions ДавайПоНовійException Thrown when the user chooses to return to the menu. ДоПобаченняException Thrown when the user chooses to exit the program. Write(object) Writes a message to the program output. public void Write(object message) Parameters message object The message to be written. WriteLine(object) Writes a message to the program output, appending a New line at the end. public void WriteLine(object message) Parameters message object The message to be written. Explicit Interface Implementations GlobalTheme Gets the global color theme used for styled output. Coloring.Theme GlobalTheme { get; } Returns Coloring.Theme HelpMenu Gets the formatted help menu as a string. string HelpMenu { get; } Returns string Reader Gets the input data stream. TextReader Reader { get; } Returns TextReader TalkToUser Indicates whether the context should display messages to the user. bool TalkToUser { get; } Returns bool Writer Gets the output data stream. TextWriter Writer { get; } Returns TextWriter"
  },
  "api/ClassLibraryVB.IO.RequestStyle.html": {
    "href": "api/ClassLibraryVB.IO.RequestStyle.html",
    "title": "Enum RequestStyle | Lab3",
    "summary": "Enum RequestStyle Namespace ClassLibraryVB.IO Assembly ClassLibraryVB.dll Specifies a style for the request message in the Context.Request* methods. public enum RequestStyle Extension Methods Enumerable.Let<TSource, TResult>(TSource, Func<TSource, TResult>) Fields Bare = 2 Just a regular ReadLine(). Default = 0 A request message Is placed in the previous line. Request message > | Inline = 1 The request message Is placed on the same line. Request message: |"
  },
  "api/ClassLibraryVB.IO.html": {
    "href": "api/ClassLibraryVB.IO.html",
    "title": "Namespace ClassLibraryVB.IO | Lab3",
    "summary": "Namespace ClassLibraryVB.IO Classes Context Represents an execution context that implements ConsoleUI.IContext for reading input, writing output, and handling user interaction with color themes. ДавайПоНовійException Exception thrown to indicate the program should exit to the menu. ДоПобаченняException Exception thrown to indicate the program should exit completely. Enums RequestStyle Specifies a style for the request message in the Context.Request* methods."
  },
  "api/ClassLibraryVB.IO.ДавайПоНовійException.html": {
    "href": "api/ClassLibraryVB.IO.ДавайПоНовійException.html",
    "title": "Class ДавайПоНовійException | Lab3",
    "summary": "Class ДавайПоНовійException Namespace ClassLibraryVB.IO Assembly ClassLibraryVB.dll Exception thrown to indicate the program should exit to the menu. public class ДавайПоНовійException : Exception, ISerializable Inheritance object Exception ДавайПоНовійException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods Enumerable.Let<TSource, TResult>(TSource, Func<TSource, TResult>) Constructors ДавайПоНовійException() public ДавайПоНовійException()"
  },
  "api/ClassLibraryVB.IO.ДоПобаченняException.html": {
    "href": "api/ClassLibraryVB.IO.ДоПобаченняException.html",
    "title": "Class ДоПобаченняException | Lab3",
    "summary": "Class ДоПобаченняException Namespace ClassLibraryVB.IO Assembly ClassLibraryVB.dll Exception thrown to indicate the program should exit completely. public class ДоПобаченняException : Exception, ISerializable Inheritance object Exception ДоПобаченняException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods Enumerable.Let<TSource, TResult>(TSource, Func<TSource, TResult>) Constructors ДоПобаченняException() public ДоПобаченняException()"
  },
  "api/Cli.Args.Handler.html": {
    "href": "api/Cli.Args.Handler.html",
    "title": "Class Args.Handler | Lab3",
    "summary": "Class Args.Handler Namespace Cli Assembly lab3.dll Handles parsing of CLI arguments and provides the configured execution context, including the selected theme, input source, and verbosity setting. [CompilationMapping(SourceConstructFlags.ObjectType)] public class Args.Handler Inheritance object Args.Handler Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods Enumerable.Let<TSource, TResult>(TSource, Func<TSource, TResult>) Constructors Handler(string[]) public Handler(string[] args) Parameters args string[] Properties GlobalTheme Gets the global theme specified via CLI arguments. Defaults to Theme.Cold if not specified. public Coloring.Theme GlobalTheme { get; } Property Value Coloring.Theme InputFile Gets the input source for commands. If an input file is specified, it is used; otherwise, Console input is used. public TextReader InputFile { get; } Property Value TextReader TalkToUser Indicates whether output should be printed to the user (true by default). Can be controlled via the --talkToUser or -q option. public bool TalkToUser { get; } Property Value bool Methods getContext() Constructs and returns a Context instance based on parsed CLI arguments. public Context getContext() Returns Context Configured Context object for executing tasks."
  },
  "api/Cli.Args.html": {
    "href": "api/Cli.Args.html",
    "title": "Class Args | Lab3",
    "summary": "Class Args Namespace Cli Assembly lab3.dll Provides parsing and handling of command-line arguments for the lab3 application. Supports reading an input file, enabling/disabling console output, and setting a visual theme. [CompilationMapping(SourceConstructFlags.Module)] public static class Args Inheritance object Args Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields usage [Literal] public const string usage = \"\\r\\nUsage:\\r\\n lab3 [input-file] [options]\\r\\n\\r\\nOptions:\\r\\n --help|-h Show help message\\r\\n --input-file FILEPATH Specify a task command sequence file\\r\\n --task-to-user BOOL Print messages to the console\\r\\n --theme THEME Set color theme, available themes:\\r\\n - Default\\r\\n - Classic\\r\\n - BlueAccents\\r\\n - Hackerman\\r\\n - Cold\\r\\n - Warm\\r\\n - Sunset\\r\\n - Forest\\r\\n - Ocean\\r\\n -q Set talkToUser to false\\r\\n -td Set theme to Default\\r\\n -tcl Set theme to Classic\\r\\n -tb Set theme to BlueAccents\\r\\n -th Set theme to Hackerman\\r\\n -tc Set theme to Cold\\r\\n -tw Set theme to Warm\\r\\n -ts Set theme to Sunset\\r\\n -tf Set theme to Forest\\r\\n -fo Set theme to Ocean\\r\\n\" Field Value string"
  },
  "api/Cli.html": {
    "href": "api/Cli.html",
    "title": "Namespace Cli | Lab3",
    "summary": "Namespace Cli Classes Args Provides parsing and handling of command-line arguments for the lab3 application. Supports reading an input file, enabling/disabling console output, and setting a visual theme. Args.Handler Handles parsing of CLI arguments and provides the configured execution context, including the selected theme, input source, and verbosity setting."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Lab3",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Lab3",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the Documentation of the Local Libraries in Lab 3 | Lab3",
    "summary": "Welcome to the Documentation of the Local Libraries in Lab 3 This documentation provides detailed information about the local libraries used in the third laboratory work. It includes the functionality, usage instructions, and API reference for the libraries integrated within the project."
  }
}